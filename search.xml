<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringCloud</title>
    <url>/2022/05/31/SpringCloud/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>后端开发笔记</title>
    <url>/2022/05/31/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p><strong>此篇文章将会记录本人在开发后端过程中所遇到的一些异常问题与解决方法以及知识点</strong></p>
</blockquote>
<h2 id="Mybatis-amp-MybatisPlus"><a href="#Mybatis-amp-MybatisPlus" class="headerlink" title="Mybatis&amp;MybatisPlus"></a>Mybatis&amp;MybatisPlus</h2><ol>
<li><p><strong>MybatisPlus 持久层映射可以在实体类使用@TableName注解来指定映射数据库名；如果不使用该注解，在使用到MybatisPlus默认的数据库语句时，会默认映射以实体类名为基础的数据库名，导致报错(Invalid bound statement::not found)，见下方代码:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;message_manage&quot;)</span>  </span><br><span class="line"><span class="comment">//不使用此注解则默认映射数据库为message_manage_entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageManageEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
</li>
<li><p><strong>当相关数据库操作报错提示Mapper映射不到时，请检查mapper.xml文件里namespace属性值</strong>  </p>
</li>
<li><p><strong>使用mybatis-plus自带的数据库操作方法时，请确保自定义SQL方法(xml)里没有与之重名的方法，否则mybatis-plus的自带方法会被覆盖</strong> </p>
</li>
<li><p>__使用mybatis-plus的注解<code>@DS</code>多数据源配置时，请不要在有切换数据源的方法中直接使用<code>@Transactional</code>注解，否则会导致切换数据源失败，程序读取的依然是最先加载的数据源所以会报相关表不存在；<br> <code>@Transactional</code>默认传播策略propagation是PROPAGATION.REQUIRED，如果当前线程池connect存在时，<code>@Transactional</code>会直接使用该连接，所以会导致表不存在。解决办法是在相应的mapper上使用<br> <code>@Transactional</code>注解并声明传播策略为PROPAGATION.REQUIRED_NEW,意思是如果当前存在事务连接connect，则挂起当前事务并创建一个新的事务连接，也就不会再使用原来的connect了。</p>
</li>
</ol>
<h2 id="项目启动过程中"><a href="#项目启动过程中" class="headerlink" title="项目启动过程中"></a>项目启动过程中</h2><ul>
<li><p><strong>项目启动前build时，报错import xxx…xxxxx…</strong><br>可能是没有引入依赖包查看pom.xml 或者 build.gradle查看是否有相关依赖，<br>如果有此依赖，请将此依赖包 package(maven) 或publishToMavenLocal(gradle)</p>
</li>
<li><p><strong>启动过程中  出现Consider defining a bean of type ‘xxxxxxxx” in your configuration</strong></p>
<ul>
<li>首先找到对应类是否标注<code>@Service</code>  或 <code>@Component</code> 等注解</li>
<li>第二查看启动类XXXApplication.java 的注解上 <code>@SpringBootApplication(scanBasePackages =)</code>注解 包扫描属性是否包括对应缺失类所在的包路径</li>
<li>第三如果出现该错误的类是FeignClient,请确认XXXApplcation.java启动类的<code>@EnableFeignClients(basePackages=)</code>注解是否有填写对应feign所在的包路径</li>
</ul>
</li>
</ul>
<h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><ul>
<li><strong>pom.xml版本迭代</strong> 例如修改了sc-common-parent -&gt; open-rpc 里某个模块的代码后，需将对应服务的pom.xml进行版本迭代升级,再到引入了该服务的pom或gradle文件里将版本号迭代统一</li>
</ul>
<h2 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h2><ul>
<li><strong>Gradle管理的项目 依赖包不全问题</strong><ul>
<li>IDEA-&gt;setting-&gt;build-&gt;buildtools-&gt;gradle-&gt;use gradle from属性<br>  请设置为specified location</li>
</ul>
</li>
</ul>
<h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><ul>
<li><p><strong>字段校验问题</strong></p>
<ul>
<li><code>@NotBlank</code>  用来校验String类型字段属性是否为空，Integer类型等不适用，请使用@NotNull 并在controller层配合@valid注解开启校验功能</li>
<li><code>@Options(useGeneratedKeys = true)</code> 在mapper里自定义的方法上使用该注解时获取SQL操作后的主键id，不是直接return 该方法的返回值，而是需要调用实体对象的主键id属性<blockquote>
<p>不要使用<del>return insertXXX();</del> 而是使用return xxx.getId();</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>Lombok注解使用</strong></p>
<ul>
<li><code>@Builder</code><br>   org.springframework.dao.DataIntegrityViolationException: Error attempting to get column ‘pid’ from result set.  Cause: org.postgresql.util.PSQLException: 不良的类型值 int : <blockquote>
<p>遇见这个错误的时候，是给对象添加<code>@Builder</code>的时候，对数据进行查询的时候，对象关系映射发生了错误。使用<code>@Builder</code>相当于直接使用了建造者模式，对象的构造方法直接被覆盖；也就是说，无参构造函数没有了，由于无参构造方法不存在，进行对象关系映射的时候，自然也就无法映射到对象了，也就是说这个错误真正的问题是，没有无参构造方法 ：需要做的仅仅是添加一个构造方法。</p>
</blockquote>
</li>
<li><code>@Bulider</code><br>  在实体类上使用此注解时，如果实体属性设置了默认值，则在用builder构建对象的时候，默认值不会生效，需要在实体属性上标注<code>@Builder.Default</code>注解，并且lombok版本需要在1.18.4及以上，否则<code>@NoArgsConstructor</code>生成的无参构造没有默认值</li>
</ul>
</li>
<li><p><strong>Spring注解</strong></p>
<ul>
<li><code>@DateTimeFormat</code> 此注解无法在RequestBody中生效，只能在类似RequestParam传参形式中生效</li>
<li><code>@Scheduled(cron= &quot;&quot;)</code> 定时任务注解使用时，请在启动类上标注<code>@EnableScheduling</code>注解，否则定时任务无法生效。同时也请使用<code>@Component</code>注解标注定时任务所在的类,否则同样不生效;</li>
<li><code>@EnableRetry</code> Spring重试注解,可搭配<code>@Scheduled</code>注解使用，构成简单的定时任务重试机制，可用于网络暂时波动，代码运行时异常等情况，无法用于服务器或项目重启。  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-retry重试所需的maven依赖  如果报pointcut缺少错误 请导入aspectj依赖包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用样例</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTask</span> &#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;40 31 13 * * ?&quot;)</span></span><br><span class="line">    <span class="comment">//value:重试机制捕获的异常;  maxAttempts:最大重试次数; backoff为重试间隔 delay:重试间隔/秒 multiplier:重试间隔倍数 设为2 则为 2 4 8进行重试</span></span><br><span class="line">    <span class="meta">@Retryable(value = Exception.class, maxAttempts = 15, backoff = @Backoff(delay = 2000, multiplier = 1))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timingTask</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;测试:&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@Recover注解为到达重试次数后依然失败的处理方法，必须是@Retryable注解所注明的方法里抛出的异常；</span></span><br><span class="line">    <span class="comment">//@Recover标注的方法其返回值必须与@Retryable标注的方法返回值保持一致</span></span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">errorRecord</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;重试失败:&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用反射获取注解及注解里的参数值报空指针异常时，导致原因是通过cglib(aop)代理时无法获取到注解，可以使用Spring官方自带的注解工具类AnnotationUtils来操作<br><del>obj.getClass().getAnnotation(xxx.Class)</del> to AnnotationUtils.findAnnotation();</li>
</ul>
</li>
</ul>
<h2 id="foreach的使用"><a href="#foreach的使用" class="headerlink" title="foreach的使用"></a>foreach的使用</h2><ul>
<li><strong>Java1.8的lambda里foreach并不是普通的for循环，不能使用break,continue等</strong></li>
</ul>
<h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><ul>
<li><strong>List</strong><ul>
<li>singletonList返回的list等同于Array.asList的，无法进行add等操作，是不可变的List</li>
</ul>
</li>
</ul>
<h2 id="Feign配置"><a href="#Feign配置" class="headerlink" title="Feign配置"></a>Feign配置</h2><ul>
<li><strong>关于Feign远程调用RPC传输文件（eg:上传图片)无效的解决方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *当前项目需要注意以下几点:</span></span><br><span class="line"><span class="comment"> *第一需要引入两个依赖包：</span></span><br><span class="line"><span class="comment"> *       &lt;dependency&gt;</span></span><br><span class="line"><span class="comment"> *           &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment"> *           &lt;artifactId&gt;feign-form&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment"> *           &lt;version&gt;3.4.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment"> *       &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> *       &lt;dependency&gt;</span></span><br><span class="line"><span class="comment"> *           &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment"> *           &lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment"> *           &lt;version&gt;3.4.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment"> *       &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> *ps:feign为10.0后的版本 以上两个依赖包版本请使用3.5.0之后的。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二需要在调用方的Feign接口声明处@PostMapping注解属性里加上</span></span><br><span class="line"><span class="comment">//   		consumes = MediaType.MULTIPART_FORM_DATA_VALUE</span></span><br><span class="line"><span class="comment">// 例如：@PostMapping(value = &quot;xxx&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三需要在调用方当前项目的feign的config文件里加上以下配置</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Encoder <span class="title function_">multipartFormEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringFormEncoder</span>(<span class="keyword">new</span> <span class="title class_">SpringEncoder</span>(messageConverters));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
  <br>  

<ul>
<li><strong>引入依赖报错</strong><ul>
<li>例如有公共依赖包模块c,里面写了有关feign的包括但不限于FeignExceptionHandler，而项目a引用了模块c，但自身项目又写了有关feign的包括但不限于FeignExceptionHandler,会导致引用@resource FeignClient时报错，请注释或删除项目a自身的FeignExceptionHandler（当模块c必须引入时）</li>
</ul>
</li>
</ul>
<h2 id="配置中心属性配置问题"><a href="#配置中心属性配置问题" class="headerlink" title="配置中心属性配置问题"></a>配置中心属性配置问题</h2><ul>
<li><strong>Apollo</strong> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">##如果在配置中心某一级赋值了，那么在该级下不允许再存在子级;</span></span><br><span class="line"><span class="string">例如:</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">   <span class="attr">android:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">xiaomi:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">##因在android一级配置了属性值，则不允许在android下存在子级xiaomi。只能配置同级属性，或另起炉灶;</span></span><br></pre></td></tr></table></figure>
  <br></li>
</ul>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ul>
<li><p><strong>版本特性</strong></p>
<ul>
<li>Spring4.3版本以后，当目标bean只定义了一个构造函数，则不需要再使用<code>@Autowired</code>或<code>@Resource</code>注解（常见于控制层）但需要多写一个控制层的构造方法，lombok提供的<code>@AllArgsConstructor</code>注解可以省略写构造方法。ps:目标bean用final关键字修饰是保证bean在构造方法中就被初始化<a href="https://blog.csdn.net/weixin_43072970/article/details/102627078?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link" title="不要再到处用@Autowired了...">CSDN例子</a></li>
</ul>
</li>
<li><p><strong>method.invoke()</strong><br>  -利用mothod.invoke(obj)反射执行方法时，如果执行类对象obj里存在<code>@Autowired</code>或<code>@Resource</code>注解依赖注入的bean，则执行方法用到该bean时会报空指针异常，所以obj不要使用普通的实例化方法，<br>  例如：<code>Class.newInstance()</code> 而是使用 spring的context获取bean：<code>invoke(applicationContext.getBean(Class))</code></p>
</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li><p><strong>MongoDB</strong></p>
<ul>
<li>连接mongodb数据库时遇到 <code>MongoNetworkError: Authentication failed., mongodb Authentication failed</code> 问题，请确定authSource参数是否对应。mongodb创建账号是根据库绑定的，例如：<blockquote>
<p>  yapi的config.json文件里配置数据库连接时，如果使用创建在MongoDB自带admin库下的账号，authSource的值请填写为admin，否则yapi会默认使用参数值<code>yapi</code>作为authSouce参数的值，所以会出现上述报错</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>PostgreSQL</strong></p>
<ul>
<li>模糊查询时报 <code>ERROR: could not determine data type of parameter $1</code> 问题，是因为PostgreSQL无法确定参数类型, 要么强转 <code>#&#123;param&#125;::text</code> 要么 <code>&#39;%&#39;||#&#123;param&#125;||&#39;%&#39;</code>，个人使用选择了后者，前者强转在项目中红线报错。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
        <tag>Runtime</tag>
        <tag>Mybatis</tag>
        <tag>Mybatis-Plus</tag>
        <tag>Maven</tag>
        <tag>Gradle</tag>
        <tag>Feign</tag>
        <tag>配置中心</tag>
        <tag>Spring</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
